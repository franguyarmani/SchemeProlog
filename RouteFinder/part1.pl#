edge('S','A',300).
edge('S','D',20).
edge('A','B',1500).
edge('A','D',400).
edge('B','C',9).
edge('B','E',200).
edge('C','D',2000).
edge('C','G',12).
edge('G','F',800).
edge('F','E',400).
edge('E','D',3).


connected(X,Y,L) :- edge(X,Y,L) ; edge(Y,X,L).

planePossible(Point1,Point2,L):-
    connected(Point1,Point2,L),
    L>=400.
busPossible(Point1,Point2,L):-
    connected(Point1,Point2,L),
    \+member(Point1, ['A','E','F']).

time(Point1, Point2, plane, Time,Cost):-
    planePossible(Point1,Point2,L),
    Time is L/500,
    Cost is L.

time(Point1,Point2,train,Time,Cost):-
    connected(Point1,Point2,L),
    Time is L/120,
    Cost is L*0.75.

time(Point1,Point2,bus,Time,Cost):-
    busPossible(Point1,Point2,L),
    Time is L/80,
    Cost is L*0.60.
time(Point1,Point2,car,Time,Cost):-
    connected(Point1,Point2,L),
    Time is L/80,
    Cost is L*0.40.
time(Point1,Point2,walk,Time,Cost):-
    connected(Point1,Point2,L),
    Time is L/5,
    Cost is 0.


travel(Point1,Point2,Len,Path,[Point2|Path]) :-
    connected(Point1,Point2,Len).
travel(Point1,Point2,Length,Visited,Path) :-
    connected(Point1,AnotherPoint,L),
    AnotherPoint \==Point2,
    \+member(AnotherPoint,Visited),
    travel(AnotherPoint,Point2,SubPathLength,[AnotherPoint|Visited],Path),
    Length is L+SubPathLength.

path(StartNode,EndNode,Path):-
    travel(StartNode,EndNode,_,[StartNode],Q),
    reverse(Q,Path).

path(StartNode,EndNode,Length,Path) :-
    travel(StartNode,EndNode,Length,[StartNode],Q),
    reverse(Q,Path).
path1(StartNode,WayPoint,EndNode,Length,Path) :-
    travel(StartNode,EndNode,Length,[StartNode],Q),
    member(WayPoint,Q),
    reverse(Q,Path).
path2(StartNode,WayPoint1,WayPoint2,EndNode,Length,Path) :-
    travel(StartNode,EndNode,Length,[StartNode],Q),
    member(WayPoint1,Q),
    member(WayPoint2,Q),
    reverse(Q,Path).
path(StartNode,WayPoint1,WayPoint2,WayPoint3,EndNode,Length,Path) :-
    travel(StartNode,EndNode,Length,[StartNode],Q),
    member(WayPoint1,Q),
    member(WayPoint2,Q),
    member(WayPoint3,Q),
    reverse(Q,Path).
pathAll(StartNode,Length,Path) :-
    travel(StartNode,StartNode,Length,[StartNode],Q),
    member('A',Q),
    member('B',Q),
    member('C',Q),
    member('D',Q),
    member('E',Q),
    member('F',Q),
    member('G',Q),
    reverse(Q,Path).

findStats([H,S|T],Time,Cost,Traveled,[Mode|Traveled]):-
    time(H,S,Mode,Time,Cost),
    T == [].
findStats([H,S|Tail],Time,Cost, Used, Traveled):-
    time(H,S,Mode,T,C),
    findStats([S|Tail],SubT,SubC,[Mode|Used],Traveled),
    Time is T+SubT,
    Cost is C+SubC.

shortestPath(StartNode,EndNode,Length,Path):-
    setof([Path,Length], path(StartNode,EndNode,Length,Path), Set),
    Set = [_|_],
    minimal(Set,[Path,Length]).
shortestPath(StartNode, WayPoint, EndNode, Path, Length):-
    setof([Path,Length], path(StartNode,WayPoint,EndNode,Length,Path), Set),
    Set = [_|_],
    minimal(Set,[Path,Length]).
shortestPath(StartNode, WayPoint1,WayPoint2, EndNode, Path, Length):-
    setof([Path,Length], path(StartNode,WayPoint1,WayPoint2,EndNode,Length,Path), Set),
    Set = [_|_],
    shortest(Set,[Path,Length]).
shortestPath(StartNode, WayPoint1,WayPoint2,WayPoint3,EndNode,Path,Length):-
    setof([Path,Length], path(StartNode,WayPoint1,WayPoint2,WayPoint3,EndNode,Length,Path), Set),
    Set = [_|_],
    minimal(Set,[Path,Length]).

shortestPathAll(StartNode,Length,Path):-
    setof([Path,Length], pathAll(StartNode,Length,Path), Set),
    Set = [_|_],
    minimal(Set,[Path,Length]).

shortestPathThereAndB(StartNode,EndNode,Length,Path):-
    setof([Path,Length], path(StartNode,EndNode,Length,Path), Set),
    Set = [_|_],
    minimal(Set,[Path,Length]).

timedPath(StartNode,EndNode,Time,Path,Traveled):-
    path(StartNode,EndNode,Path),
    findStats(Path,Time,_,[],Travel),
    reverse(Travel,Traveled).

timedPath3Points(StartNode,W1,W2,W3,EndNode,Time,Path,Traveled):-
    path(StartNode,W1,W2,W3,EndNode,_,Path),
    findStats(Path,Time,_,[],Travel),
    reverse(Travel,Traveled).

timedPathAll(StartNode,Time,Path,Traveled):-
    pathAll(StartNode,_,Path),
    findStats(Path,Time,_,[],Travel),
    reverse(Travel,Traveled).


budgetPath(StartNode,EndNode,Cost,Path,Traveled):-
    path(StartNode,EndNode,Path),
    findStats(Path,_,Cost,[],Travel),
    reverse(Travel,Traveled).

timedBudgetPathAll(StartNode,Budget,Time,Cost,Path,Traveled):-
    pathAll(StartNode,_,Path),
    findStats(Path,Time,Cost,[],Travel),
    Cost =< Budget,
    !,
    reverse(Travel,Traveled).

fastestPath(StartNode,EndNode,Time,Path,Traveled):-
    setof([P,Trav,T], timedPath(StartNode,EndNode,T,P,Trav),Set),
    Set = [_|_],
    quickest(Set,[Path,Travel,Time]),
    reverse(Travel,Traveled).

cheapestPath(StartNode,EndNode,Cost,Path,Traveled):-
    setof([P,Trav,C], budgetPath(StartNode,EndNode,C,P,Trav),Set),
    Set = [_|_],
    quickest(Set,[Path,Travel,Cost]),
    reverse(Travel,Traveled).

fastestPathAll(StartNode,Time,Path,Traveled):-
    setof([P,Trav,T], timedPathAll(StartNode,T,P,Trav),Set),
    Set = [_|_],
    quickest(Set,[Path,Travel,Time]),
    reverse(Travel,Traveled).
%This Satisfies scenerio 2
fastestPath3WayPoints(StartNode,W1,W2,W3,Time,Path,Traveled):-
    setof([P,Trav,T], timedPath3Points(StartNode,W1,W2,W3,StartNode,T,P,Trav),Set),
    Set = [_|_],
    quickest(Set,[Path,Travel,Time]),
    reverse(Travel,Traveled).
%This satisfies scenerio 3
fastestPathAllUnderBudget(StartNode,Budget,Time,C,Path,Traveled):-
    setof([P,Trav,T], timedBudgetPathAll(StartNode,Budget,T,C,P,Trav),Set),
    Set = [_|_],
    quickest(Set,[Path,Travel,Time]),
    reverse(Travel,Traveled).






%HelperFunctions
quickest([First|Rest],Quick):-
    quick(First,Rest,Quick).

quick(Quick,[],Quick).
quick([_,_,Q],[[P,Trav,T]|R],Quick):-
    T < Q,
    !,
    quick([P,Trav,T],R,Quick).
quick(Q,[_|R],Quick):-
    quick(Q,R,Quick).


minimal([First|Rest],Min):-
    min(First,Rest,Min).

min(Min,[],Min).
min([_,M],[[P,L]|R],Min) :-
    L < M,
    !,
    min([P,L],R,Min).

min(M,[_|R],Min) :-
    min(M,R,Min).

